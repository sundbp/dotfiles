if has("gui_running")
  let g:solarized_termcolors=256
else
  let g:solarized_termcolors=16
endif
set background=dark
colorscheme solarized

"colorscheme molokai

set guifont=Monaco\ for\ Powerline\ 11
"set guifont=Menlo\ for\ Powerline\ 11
"set guifont=Inconsolata-dz\ for\ Powerline\ 11
"set guifont=Mensch\ for\ Powerline\ 11
"set guifont=Monospace\ 11

" remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" set F6 to toggle paste mode
nmap <F6> :set invpaste paste?<CR>
set pastetoggle=<F6>

" show a 120 char width market
set cc=120
hi ColorColumn ctermbg=darkgrey guibg=darkgrey

" no menubar
set guioptions-=T

"  Git Hotness
set statusline+=%{fugitive#statusline()} "  Git Hotness

" do not store global and local values in a session
set ssop-=options " do not store global and local values in a session

"switch back to current file and closes fugitive buffer
nnoremap <Leader>gD :diffoff!<cr><c-w>h:bd<cr><c-w>k<cr>

" save/load session
map <F7> :mksession! ~/.session.vim <cr>
map <F8> :source ~/.session.vim <cr>

" extra mappings for mru and buffer search
nmap <c-o> :CtrlPMRU<cr>
nmap <c-i> :CtrlPBuffer<cr>

let g:slime_target = "tmux"

" make sure we can just hit the shortcut key and always run the specs
function! MyRunRspec()
  let l:fname = expand("%:t")
  if stridx(l:fname, "_spec.rb") == -1
    call RunRspecRelated()
  else
    call RunRspecCurrentFileConque()
  endif
endfunction

" Cmd-Shift-R for RSpec
nmap <silent> <C-R> :call MyRunRspec()<CR>
" Cmd-Shift-L for RSpec Current Line
nmap <silent> <Leader>l :call RunRspecCurrentLineConque()<CR>
" ,Cmd-R for Last conque command
nmap <silent> ,<C-R> :call RunLastConqueCommand()<CR>

nmap <silent> ,z :bp<CR>
nmap <silent> ,x :bn<CR>

" Find the related spec for any file you open.
function! RelatedFileForSpec()
  let l:fullpath = expand("%:p")
  let l:filepath = expand("%:h")
  let l:fname = expand("%:t")
  let l:filepath_as_lib = substitute(l:filepath, "spec/", "lib/", "")
  let l:filepath_as_app = substitute(l:filepath, "spec/", "app/", "")

  " Possible names for the spec/test for the file we're looking at
  let l:file_for_spec_names = [substitute(l:fname, "_spec.rb$", ".rb", "")]

  " Possible paths
  let l:file_for_spec_paths = [l:filepath_as_lib, l:filepath_as_app]

  for file_name in l:file_for_spec_names
    for path in l:file_for_spec_paths
      let l:file_for_spec_path = path . "/" . file_name
      let l:full_file_for_spec_path = substitute(l:fullpath, l:filepath . "/" . l:fname, l:file_for_spec_path, "")
      if filereadable(l:full_file_for_spec_path)
        return l:full_file_for_spec_path
      end
    endfor
  endfor
endfunction

function! RelatedFileForSpecOpen()
  let l:file_path = RelatedFileForSpec()
  if filereadable(l:file_path)
    execute ":e " . l:file_path
  endif
endfunction

function! RelatedFileForSpecVOpen()
  let l:file_path = RelatedFileForSpec()
  if filereadable(l:file_path)
    execute ":botright vsp " . l:file_path
  endif
endfunction

" make sure we can just hit the shortcut key and switch between spec and file
function! MyRelatedSpecFileSwitch()
  let l:fname = expand("%:t")
  if stridx(l:fname, "_spec.rb") == -1
    call RelatedSpecOpen()
  else
    call RelatedFileForSpecOpen()
  endif
endfunction

function! MyRelatedSpecFileVSwitch()
  let l:fname = expand("%:t")
  if stridx(l:fname, "_spec.rb") == -1
    call RelatedSpecVOpen()
  else
    call RelatedFileForSpecVOpen()
  endif
endfunction

nnoremap <silent> ,<C-s> :call MyRelatedSpecFileVSwitch()<CR>
nnoremap <silent> <C-s>  :call MyRelatedSpecFileSwitch()<CR>

function! RunPelusaCheck()
  call RunSingleConque("./pelusa_check_no_colors.sh" . " " . bufname('%'))
  "call RunSingleConque("./pelusa_check.sh" . " " . bufname('%'))
endfunction
nnoremap <silent> <Leader>p  :call RunPelusaCheck()<CR>

