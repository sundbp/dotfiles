(require 'cider)
(require 'cider-repl)
(require 'nrepl-client)
(require 'cider-macroexpansion)
(require 'cider-browse-ns)
(require 'cider-classpath)
(require 'cider-grimoire)
(require 'cider-test)

(custom-set-variables '(cider-repl-use-pretty-printing t)
                      '(cider-repl-history-file "~/.cider-history"))

(setq cider-show-error-buffer t)

(defun sundbp-cider-reset ()
  (interactive)
  (let ((user-file (concat (nrepl-project-directory-for (nrepl-current-dir)) "dev/user.clj")))
    (cider-switch-to-relevant-repl-buffer '())
    (cider-load-file user-file)
    (goto-char (point-max))
    ;;(insert "(user/recompile)")
    (insert "(user/reset)")
    (cider-repl-return)
    (message "Started session refresh via tools.namespace.")))

(defun sundbp-cider-recompile ()
  (interactive)
  (let ((user-file (concat (nrepl-project-directory-for (nrepl-current-dir)) "dev/user.clj")))
    (cider-switch-to-relevant-repl-buffer '())
    (cider-load-file user-file)
    (goto-char (point-max))
    (insert "(user/recompile)")
    (cider-repl-return)
    (message "Started session refresh via tools.namespace.")))

;; (dolist (mode '(cider-repl-mode))
;;   (add-to-list 'ac-modes mode))

(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
(setq nrepl-log-messages t)
(setq cider-prompt-save-file-on-load nil)
(setq cider-repl-result-prefix ";; => ")
(setq cider-interactive-eval-result-prefix ";; => ")
(setq cider-repl-use-clojure-font-lock t)

(require 'clj-refactor)
(add-hook 'clojure-mode-hook (lambda ()
                               (clj-refactor-mode 1)
                               (cljr-add-keybindings-with-prefix "C-c C-m")))
